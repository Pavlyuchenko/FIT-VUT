#!/bin/sh
# Author: Michal Pavlíček xpavlim00
# Date:   2024-03-07
# Description: xtf is a script used for analyzing logs from a (fictional) crypto exchange

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

display_help() {
	cat << EOF
Description: xtf is a script used for analyzing logs from a crypto exchange.

Usage: xtf [-h|--help] [FILTER] [COMMAND] USER LOG [LOG2 [...]

Author: Michal Pavlíček xpavlim00

Commands: 
    list - list records for a given user
    list-currency - displays sorted list of currencies used
    status - displays the real account balance grouped and sorted by currency
    profit - displays account balance with fictious profit

Filters:
    -a DATETIME - records after (excluding) YYYY-MM-DD HH:MM:SS
    -b DATETIME - records before (excluding)
    -c CURRENCY - only records for given currency

Help:
    -h and --help display this help
EOF
}

# User-entered command
COMMAND=""
# User-entered filters
DATE_BEFORE=""
DATE_AFTER=""
CURRENCY=""

# Check if user exported $XTF_PROFIT, else set to 20
if [ -z "$XTF_PROFIT" ]; then
	export XTF_PROFIT=20
fi

# Parse filters, help and command.
# Implemented extentions:
#	1) Can be in any order, logs are last
#	2) Can enter multiple -c filters
while [ $# -gt 0 ]; do
	case $1 in

	-h | --help)
		display_help
		exit 0
		;;

	-a)
		shift
		if [ -z "$DATE_AFTER" ]; then
			DATE_AFTER="$1"
			if echo "$DATE_AFTER" | grep -vEq '^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$'; then
				exit 1
			fi
		else
			echo "The filter -a was given twice, which is unspecified." >&2
			exit 1
		fi
		;;
	
	-b)
		shift
		if [ -z "$DATE_BEFORE" ]; then
			DATE_BEFORE="$1"
			if echo "$DATE_BEFORE" | grep -vEq '^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$'; then
                        	exit 1
                	fi
		else
			echo "The filter -b was given twice, which is unspecified." >&2
			exit 1
		fi
		;;

	-c)
		shift
		CURRENCY="$1;$CURRENCY"
		;;

	list | list-currency | status | profit)
		if [ -z "$COMMAND" ]; then
			COMMAND="$1"
		else 
			echo "You gave command twice. This is unspecified." >&2
			exit 1
		fi
		;;

	*)
		# This will mean we want to load User, or if it's a file, we continue.
		if [ -r "$1" ]; then
		       break	
		fi
		USER="$1"
		;;
	esac
	shift
done

# If no command was specified, we use list
if [ -z "$COMMAND" ]; then
	COMMAND="list"
fi

# Load log files
INPUT=""
while [ $# -gt 0 ]; do
	case $1 in
		*.gz)
			if [ -r "$1" ]; then
				INPUT="$INPUT$(gunzip -c "$1" | cat)"
				INPUT=$(printf "%s" "$INPUT" "\n")
			else 
				exit 1 
			fi
			;;

		*)
			if [ -r "$1" ]; then
				INPUT="$INPUT$(cat "$1" ; echo)"
				INPUT=$(printf "%s" "$INPUT" "\n")
			else
				exit 1
			fi
			;;	
	esac
	shift
done

# Variable that is used for application of filters
FILTER=""

## Currency
if [ -n "$CURRENCY" ]; then
        FILTER="| awk -F';' -v CURRENCY=\"$CURRENCY\" 'BEGIN{ split(CURRENCY, currencies, \";\") } { for (idx in currencies) if (\$3 == currencies[idx]) print }'"
fi

## Date before
if [ -n "$DATE_BEFORE" ]; then
    FILTER="$FILTER | awk -F';' -v DATE_BEFORE='$DATE_BEFORE' '{ if (\$2 < DATE_BEFORE) print }'"
fi

## Date after
if [ -n "$DATE_AFTER" ]; then
    FILTER="$FILTER | awk -F';' -v DATE_AFTER='$DATE_AFTER' '{ if (\$2 > DATE_AFTER) print }'"
fi

INPUT="printf \"%b\n\" \"$INPUT\" | awk '/./'"


# First we load the contents of files, then apply filters
FINALCOMMAND="$INPUT $FILTER"

# Command execution on filtered files contents
case $COMMAND in
	list)
		FINALCOMMAND="$FINALCOMMAND | awk -F';' -v USER='$USER' '{ if (\$1 == USER) print }'"
		;;

	list-currency)
		FINALCOMMAND="$FINALCOMMAND | awk -F';' -v USER='$USER' '{ if (\$1 == USER) currencies[\$3] = 1 } END{for(currency in currencies) print currency}' | sort"
		;;

	status)
		FINALCOMMAND="$FINALCOMMAND | awk -F';' -v USER='$USER' '{ if (\$1 == USER) balances[\$3]+=\$4 } END{ for(balance in balances) printf \"%s : %0.4f\n\", balance, balances[balance] }' | sort"
		;;

	profit)
		FINALCOMMAND="$FINALCOMMAND | awk -F';' -v USER='$USER' -v PROFIT='$XTF_PROFIT' '{ if (\$1 == USER) balances[\$3]+=\$4 } END{ for (balance in balances) if (balances[balance] > 0) printf \"%s : %0.4f\n\", balance, balances[balance] + balances[balance] * (PROFIT / 100); else printf \"%s : %0.4f\n\", balance, balances[balance] }' | sort"
		;;
esac

eval "$FINALCOMMAND"
